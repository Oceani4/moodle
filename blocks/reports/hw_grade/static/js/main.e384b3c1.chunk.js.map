{"version":3,"sources":["logo.svg","report/Report.actions.js","report/Report.Component.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","host","apiGET","action","a","params","Axios","get","resp","data","console","log","loadCourses","courses","setCourses","loadHeaderData","setHeaderData","total","attention","loadTableData","tableData","setTableData","items","getParameterByName","name","url","window","location","href","replace","results","RegExp","exec","decodeURIComponent","loadInitialData","handleOnSelectCourse","setSelectedCourses","setSelectedQuizes","setSearch","courseId","quizId","search","useStyles2","makeStyles","theme","root","width","marginTop","spacing","alignItems","table","minWidth","marginLeft","tableWrapper","overflowX","grader","color","directionColumn","direction","directionRow","buttonMarginTop","boxSearch","justifyContent","marginBottom","textField","maxWidth","display","select","height","selectTitle","columns","id","label","align","Report","props","classes","useState","selectedCourses","quizes","setQuizes","selectedQuizes","headerData","selected","useEffect","loadTableDataAsync","initial","qData","map","row","course_id","findIndex","qRow","quiz_id","push","quiz_name","length","sortedQData","sort","b","unshift","Fragment","Paper","className","Box","Typography","variant","component","type","value","onChange","e","target","Button","onClick","search_query","event","course","key","fullname","quiz","allCoursesSelected","includes","allQuizesSelected","Table","stickyHeader","aria-label","TableHead","TableRow","column","TableCell","style","TableBody","user_name","toUpperCase","user_email","quiz_attempt_id","user_link","user_company","attempt","time_spent","status","_url","renderOnReview","onreview_link","onreview_status","onreview_grader","posts","plagiat_percent","renderTable","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e384b3c1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react'\r\nimport Axios from 'axios'\r\nimport {testStudents, testCurators, testCourses, testSubCourses, testCompany, testExercise, testHeaderData, testTableData} from \"../api/testData\";\r\n\r\n// const host = 'http://moodle-test.bankdabrabyt.by'\r\nconst host = 'http://moodle.bankdabrabyt.by'\r\n// const host = 'http://192.168.99.101'\r\n\r\nconst apiGET = async (action, params = {}) => {\r\n    try {\r\n        const resp = await Axios.get(`${host}/blocks/reports/hw_grade/api.php`, {\r\n            params: {\r\n                ...params,\r\n                action: action\r\n            }\r\n        })\r\n        if (resp && resp.data){\r\n            return resp.data\r\n        }\r\n    }\r\n    catch(error) {\r\n        console.log('error: ', error)\r\n    }\r\n}\r\n\r\nexport const getStudents = () => {\r\n    return testStudents\r\n}\r\n\r\nexport const getCurators = () => {\r\n    return testCurators\r\n}\r\n\r\nexport const loadCourses = async (courses, setCourses, params)=> {\r\n    const data = await apiGET('getCourses', params)\r\n    if (data) {\r\n        // setCourses({...courses, items: data})\r\n        setCourses(data)\r\n    }\r\n}\r\n\r\nexport const getSubCourses = () => {\r\n    return testSubCourses\r\n}\r\n\r\nexport const getCompanies = () => {\r\n    return testCompany\r\n}\r\n\r\nexport const getExercises = () => {\r\n    return testExercise\r\n}\r\n\r\n\r\nexport const loadHeaderData = async (setHeaderData, params)=> {\r\n    const data = await apiGET('getHeaderData', params)\r\n    if (data) {\r\n        setHeaderData({total: data.total, attention: data.attention})\r\n    }\r\n}\r\n\r\nexport const loadTableData = async (tableData, setTableData, params)=> {\r\n    const data = await apiGET('getTableData', params)\r\n    if (data) {\r\n        await setTableData({...tableData, items: [...data]})\r\n        // console.log('3. tableData - setted: ', data)\r\n    }\r\n}\r\n\r\nfunction getParameterByName(name, url) {\r\n    if (!url) url = window.location.href;\r\n    name = name.replace(/[\\[\\]]/g, '\\\\$&');\r\n    var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),\r\n        results = regex.exec(url);\r\n    if (!results) return null;\r\n    if (!results[2]) return '';\r\n    return decodeURIComponent(results[2].replace(/\\+/g, ' '));\r\n}\r\n\r\n\r\nexport const loadInitialData = async (handleOnSelectCourse, setSelectedCourses, setSelectedQuizes, setSearch)=> {\r\n    const courseId = getParameterByName('courseid');\r\n    const quizId = getParameterByName('quizid');\r\n    const search = getParameterByName('search_query');\r\n    // console.log('1. courseId: ', courseId)\r\n    // console.log('2. quizId: ', quizId)\r\n    // console.log('3. search: ', search)\r\n    // const data = await apiGET('getInitialData')\r\n    // console.log('1. loadInitialData: ', data)\r\n    if (courseId) {\r\n        setSelectedCourses([courseId])\r\n        handleOnSelectCourse(courseId, true)\r\n        if (quizId) {\r\n            setSelectedQuizes([quizId])\r\n        }\r\n    }\r\n\r\n    if (search) {\r\n        setSearch(search)\r\n    }\r\n}","import React, {useState, useEffect } from 'react'\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\n// import Paper from '@material-ui/core/Paper';\r\n// import Button from '@material-ui/core/Button';\r\nimport { Typography, Button, Paper, TextField, Grid, Box} from '@material-ui/core'\r\nimport { FormControl, InputLabel, Select, MenuItem, Checkbox, ListItemText, Input } from '@material-ui/core'\r\n\r\nimport Table from '@material-ui/core/Table';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableFooter from '@material-ui/core/TableFooter';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\n\r\n\r\nimport {getStudents, getCurators, getSubCourses, loadCourses,  getCompanies, getExercises, loadHeaderData, loadTableData, loadInitialData} from \"./Report.actions\"\r\n\r\nconst useStyles2 = makeStyles(theme => ({\r\n    root: {\r\n        width: '100%',\r\n        marginTop: theme.spacing(3),\r\n        alignItems: 'flex-start'\r\n    },\r\n    table: {\r\n        minWidth: 500,\r\n    },\r\n    marginLeft: {\r\n        marginLeft: 10,\r\n    },\r\n    tableWrapper: {\r\n        overflowX: 'auto',\r\n    },\r\n    grader: {\r\n        color: 'orange',\r\n    },\r\n    directionColumn: {\r\n        direction: 'column',\r\n    },\r\n    directionRow: {\r\n        direction: 'row',\r\n    },\r\n    buttonMarginTop: {\r\n        marginLeft: '20px',\r\n        marginTop: '-5px'\r\n    },\r\n    boxSearch: {\r\n        'flex-direction': 'row',\r\n        justifyContent: 'center',\r\n        marginTop: '10px',\r\n        marginBottom: '10px',\r\n    },\r\n    // textField: {\r\n    //     width: 595,\r\n    //     // marginLeft: theme.spacing(1)+30,\r\n    //     marginLeft: 30,\r\n    //     marginRight: theme.spacing(1),\r\n    //     marginBottom: 20\r\n    // },\r\n    textField: {\r\n        width: '800px !important',\r\n        maxWidth: 'inherit !important',\r\n        display: 'inline-block'\r\n    },\r\n    select: {\r\n        height: '35px',\r\n        width: '400px !important',\r\n        maxWidth: 'inherit !important',\r\n        display: 'inline-block',\r\n        marginBottom: '10px'\r\n    },\r\n    selectTitle: {\r\n        width: '80px ',\r\n        display: 'inline-block'\r\n    }\r\n}));\r\n\r\nconst columns = [\r\n    { id: 'quiz', label: 'Задание', minWidth: 270 },\r\n    { id: 'student', label: 'Имя/Фамилия', minWidth: 100 },\r\n    { id: 'company', label: 'Компания', minWidth: 100 },\r\n    { id: 'attempt', label: 'Попыток', align: 'center', minWidth: 60 },\r\n    { id: 'hoursPassed', label: 'Прошло часов', align: 'center', minWidth: 60 },\r\n    { id: 'status', label: 'Статус', align: 'center', minWidth: 100 },\r\n    { id: 'message', label: 'Сообщение', align: 'center', minWidth: 100 },\r\n    { id: 'plagiat', label: 'Плагиат', align: 'center', minWidth: 100 },\r\n]\r\n\r\n\r\n\r\nconst Report = (props) => {\r\n\r\n    const classes = useStyles2()\r\n\r\n    const ITEM_HEIGHT = 48;\r\n    const ITEM_PADDING_TOP = 8;\r\n    const MenuProps = {\r\n        PaperProps: {\r\n            style: {\r\n                maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n                width: 250,\r\n            },\r\n        },\r\n    };\r\n\r\n    const ALL_COURSES_ID = '0'\r\n    const ALL_QUIZES_ID = '0'\r\n\r\n    const [courses, setCourses] = useState([])\r\n    const [selectedCourses, setSelectedCourses] = useState(['0'])\r\n    const [quizes, setQuizes] = useState([])\r\n    const [selectedQuizes, setSelectedQuizes] = useState(['0'])\r\n    // const [selectedQuizes, setSelectedQuizes] = useState(localStorage.getItem('selectedQuizes') || ['0'])\r\n    // const [subCourses, setSubCourses] = useState({items: [], selected: null})\r\n    // const [curators, setCurators] = useState({items: [], selected: null})\r\n    // const [students, setStudents] = useState({items: [], selected: null})\r\n    // const [companies, setCompanies] = useState({items: [], selected: null})\r\n    // const [exercises, setExercises] = useState({items: [], selected: null})\r\n    const [headerData, setHeaderData] = useState({total: 0, attention: 0})\r\n    const [tableData, setTableData] = useState({items: [], selected: null})\r\n    const [search, setSearch] = useState('')\r\n\r\n    useEffect(() => {\r\n        const loadTableDataAsync = async () => {\r\n            await loadTableData(tableData, setTableData)\r\n            await loadInitialData(handleOnSelectCourse, setSelectedCourses, setSelectedQuizes, setSearch)\r\n        }\r\n\r\n        loadCourses(courses, setCourses)\r\n        loadHeaderData(setHeaderData)\r\n        loadTableDataAsync()\r\n        // loadTableData(tableData, setTableData)\r\n        // loadInitialData(handleOnSelectCourse, setSelectedCourses, setSelectedQuizes, setSearch)\r\n\r\n    }, [])\r\n\r\n    const handleOnSelectCourse = (courseId, initial = false) => {\r\n        const qData = []\r\n        // console.log('1. courseId: ', courseId, typeof courseId)\r\n        // console.log('2. tableData: ', tableData)\r\n        tableData.items.map(row => {\r\n            if (courseId === row.course_id && qData.findIndex(qRow => qRow.id === row.quiz_id) === -1) {\r\n                qData.push({id: row.quiz_id, name: row.quiz_name })\r\n            }\r\n        })\r\n        if (qData.length === 0) {\r\n            setQuizes([{id: 0, name: 'Все задания'}])\r\n            if (!initial) {\r\n                setSelectedQuizes([ALL_QUIZES_ID])\r\n            }\r\n            return\r\n        }\r\n\r\n        const sortedQData = qData.sort( (a, b) => {\r\n            return a.name < b.name ? -1 : 1\r\n        })\r\n\r\n        sortedQData.unshift({id: 0, name: 'Все задания'})\r\n\r\n        setQuizes(sortedQData)\r\n        if (!initial){\r\n            setSelectedQuizes([ALL_QUIZES_ID])\r\n        }\r\n    }\r\n\r\n    const handlerButtonReload = () => {\r\n        const params = {\r\n            search_query: search,\r\n        }\r\n        loadCourses(courses, setCourses, params)\r\n        loadHeaderData(setHeaderData, params)\r\n        loadTableData(tableData, setTableData, params)\r\n    }\r\n    const renderCourses = () => {\r\n        return (\r\n            courses.items.map(item => {\r\n                return (\r\n                    <div key={item.id}>{item.name}</div>\r\n                )\r\n            })\r\n        )\r\n    }\r\n\r\n    // const renderSelectCourses = () => {\r\n    //     return (\r\n    //         <FormControl className={classes.formControl}>\r\n    //             <InputLabel id=\"demo-mutiple-checkbox-label\">Tag</InputLabel>\r\n    //             <Select\r\n    //                 labelId=\"demo-mutiple-checkbox-label\"\r\n    //                 id=\"demo-mutiple-checkbox\"\r\n    //                 multiple\r\n    //                 value={courses}\r\n    //                 onChange={(event, child)=> {\r\n    //                     const checkedId = child.props.value.id\r\n    //\r\n    //                     const isChecked = selectedCourses.indexOf(checkedId) > -1\r\n    //                     if (checkedId === '0') {\r\n    //                         if (!isChecked) {\r\n    //                             return setSelectedCourses([ ...courses.map(item => item.id)])\r\n    //                         }\r\n    //                         return setSelectedCourses([])\r\n    //                     }\r\n    //                     if (isChecked) {\r\n    //                         return setSelectedCourses([ ...selectedCourses.filter(item => item !== checkedId)])\r\n    //                     }\r\n    //                     setSelectedCourses([ ...selectedCourses, checkedId])\r\n    //                 }}\r\n    //                 input={<Input />}\r\n    //                 renderValue={items => {\r\n    //                     const selectedTitle = courses\r\n    //                         .filter(item => selectedCourses.includes(item.id))\r\n    //                         .map(item => item.shortname)\r\n    //                         .join(', ')\r\n    //\r\n    //                     return selectedTitle\r\n    //                 }}\r\n    //                 MenuProps={MenuProps}\r\n    //             >\r\n    //                 {courses.map(course => {\r\n    //                         return <MenuItem key={course.id} value={course}>\r\n    //                             <Checkbox checked={selectedCourses.indexOf(course.id) > -1} />\r\n    //                             <ListItemText primary={course.shortname}/>\r\n    //                         </MenuItem>\r\n    //                     }\r\n    //                 )}\r\n    //             </Select>\r\n    //         </FormControl>\r\n    //     )\r\n    // }\r\n    const renderSimpleCourseSelect = () => (\r\n        <div>\r\n            <div className={classes.selectTitle}>Курсы: </div>\r\n            <select\r\n                className={classes.select}\r\n                value={selectedCourses[0]}\r\n                onChange={ event =>{\r\n                    setSelectedCourses([event.target.value])\r\n                    handleOnSelectCourse(event.target.value)\r\n                }}\r\n            >\r\n                {courses.map(course => (\r\n                     <option\r\n                        key={course.id}\r\n                        value={course.id}>{course.fullname}\r\n                    </option>\r\n                ))}\r\n            </select>\r\n        </div>\r\n    )\r\n    const renderSimpleQuizSelect = () => (\r\n        <div>\r\n            <div className={classes.selectTitle}>Задания: </div>\r\n            <select\r\n                className={classes.select}\r\n                value={selectedQuizes[0]}\r\n                onChange={ event =>{\r\n                setSelectedQuizes([event.target.value])\r\n            }}\r\n            >\r\n                {quizes.map(quiz => <option\r\n                        key={quiz.id}\r\n                        value={quiz.id}>{quiz.name}\r\n                    </option>\r\n                )}\r\n            </select>\r\n        </div>\r\n    )\r\n\r\n    const renderOnReview = (url, status, grader) => {\r\n        const _url = url + '&courseid=' + selectedCourses[0] + '&quizid=' + selectedQuizes[0] + '&search_query=' + search\r\n        return <React.Fragment>\r\n            {status === 'NEED_GRADE' && <Button variant=\"contained\" color=\"primary\" href={_url}>Проверить</Button>}\r\n            {status === 'OPEN' && <Button variant=\"contained\" color=\"primary\" href={_url}>Открыть</Button>}\r\n            {status === 'ON_REVIEW' && <a href={_url}>\r\n                <div className={[classes.directionColumn, classes.grader]}>\r\n                    <div>на проверке</div>\r\n                    <div className={classes.grader}>({grader})</div>\r\n                </div>\r\n            </a>}\r\n            {status === 'GRADED' && <a href={_url}>{grader}</a>}\r\n            {status === 'AUTOTEST' && <a href={_url}>автотест</a>}\r\n        </React.Fragment>\r\n    }\r\n\r\n    const renderTable = () => {\r\n        if (!tableData.items) {\r\n            return null\r\n        }\r\n        const allCoursesSelected = selectedCourses.includes(ALL_COURSES_ID)\r\n        const allQuizesSelected = selectedQuizes.includes(ALL_QUIZES_ID)\r\n        return (\r\n            <Table stickyHeader  className={classes.table} aria-label=\"sticky table\">\r\n                <TableHead >\r\n                    <TableRow>\r\n                        {columns.map(column => (\r\n                            <TableCell\r\n                                key={column.id}\r\n                                align={column.align}\r\n                                style={{ minWidth: column.minWidth }}\r\n                            >\r\n                                {column.label}\r\n                            </TableCell>\r\n                        ))}\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {tableData.items.map(row => {\r\n                        if ((allCoursesSelected || selectedCourses.includes(row.course_id)) &&\r\n                            (allQuizesSelected || selectedQuizes.includes(row.quiz_id)) &&\r\n                            (search === '' || row.user_name.toUpperCase().includes(search.toUpperCase()) || row.user_email.toUpperCase().includes(search.toUpperCase()))) {\r\n                            return <TableRow key={row.quiz_attempt_id}>\r\n                                <TableCell>{row.quiz_name}</TableCell>\r\n                                <TableCell>\r\n                                    <a href={row.user_link}>{row.user_name}({row.user_email})</a>\r\n                                </TableCell>\r\n                                <TableCell>{row.user_company}</TableCell>\r\n                                <TableCell align='center'>{row.attempt}</TableCell>\r\n                                <TableCell align='center'>{row.time_spent}</TableCell>\r\n                                <TableCell align='center'>\r\n                                    {renderOnReview(row.onreview_link, row.onreview_status, row.onreview_grader)}\r\n                                </TableCell>\r\n                                <TableCell align='center'>{row.posts}</TableCell>\r\n                                <TableCell align='center'>{row.plagiat_percent}</TableCell>\r\n                            </TableRow>\r\n                        }\r\n                    })}\r\n                </TableBody>\r\n            </Table>\r\n        )\r\n    }\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Paper className={classes.root}>\r\n                {/*<Grid alignContent='flex-start' alignItems='flex-start'>*/}\r\n                <Box className={classes.marginLeft}>\r\n                    <Typography variant='h4' align='left'>Список непроверенных заданий в виде тестов.</Typography>\r\n                    <Typography variant='h5' align='left'>\r\n                            Всего непроверенных работ: <Typography display='inline' variant='h5' component='div' >{headerData.total}</Typography>,\r\n                            из них требуют внимания: <Typography display='inline' variant='h5' component='div' color='error'>{headerData.attention}</Typography>\r\n                    </Typography>\r\n\r\n                    {/*<Box justifyContent='center' alignItems='center' >*/}\r\n                    <Box className={classes.boxSearch}>\r\n                        {/*<TextField*/}\r\n                            {/*id=\"outlined-search\"*/}\r\n                            {/*label=\"Поиск по Имени / Фамилии / e-mail\"*/}\r\n                            {/*type=\"search\"*/}\r\n                            {/*className={classes.textField}*/}\r\n                            {/*value={search}*/}\r\n                            {/*onChange={(e) => {*/}\r\n                                {/*setSearch(e.target.value)*/}\r\n\r\n                            {/*}}*/}\r\n                            {/*margin=\"normal\"*/}\r\n                            {/*variant=\"outlined\"*/}\r\n                        {/*/>*/}\r\n                        <input\r\n                            id=\"outlined-search\"\r\n                            type=\"search\"\r\n                            className={classes.textField}\r\n                            value={search}\r\n                            onChange={(e) => {\r\n                                setSearch(e.target.value)\r\n                            }}\r\n                        />\r\n                        <Button\r\n                            className={classes.buttonMarginTop}\r\n                            variant=\"contained\"\r\n                            onClick={handlerButtonReload}\r\n                        >Обновить</Button>\r\n                    </Box>\r\n                    {/*{renderSelectCourses()}*/}\r\n                    {renderSimpleCourseSelect()}\r\n                    {renderSimpleQuizSelect()}\r\n\r\n                </Box>\r\n                    {renderTable()}\r\n                {/*</Grid>*/}\r\n            </Paper>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Report","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Report from './report/Report.Component'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Report />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}